package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const dataFile = "vkids.json"

type UserData struct {
	Vkids         []string `json:"vkids"`          // –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "04-05 Fri 14:30"
	ReminderHours int      `json:"reminder_hours"` // 0 = –≤—ã–∫–ª, -1 = –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
}

var users = make(map[int64]*UserData)

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
func loadOrCreateData() {
	if _, err := os.Stat(dataFile); os.IsNotExist(err) {
		saveData()
		return
	}

	data, err := os.ReadFile(dataFile)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %v", dataFile, err)
		return
	}

	var allUsers map[string]*UserData
	if err := json.Unmarshal(data, &allUsers); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		return
	}

	for k, v := range allUsers {
		if id, err := strconv.ParseInt(k, 10, 64); err == nil {
			users[id] = v
		}
	}
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
func saveData() {
	serializable := make(map[string]*UserData)
	for k, v := range users {
		serializable[strconv.FormatInt(k, 10)] = v
	}

	data, err := json.MarshalIndent(serializable, "", "  ")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
		return
	}

	if err := os.WriteFile(dataFile, data, 0644); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ %s: %v", dataFile, err)
	}
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ "MM-dd EEE HH:MM"
func getFormattedNow() string {
	return time.Now().Add(3 * time.Hour).Format("01-02 Mon 15:04")
}

// –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "01-02 Mon 15:04" ‚Üí time.Time
func parseVkidTime(s string) (time.Time, error) {
	parts := strings.Fields(s)
	if len(parts) < 3 {
		return time.Time{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: %s", s)
	}
	datePart := parts[0] // MM-dd
	timePart := parts[2] // HH:MM

	now := time.Now().Add(3 * time.Hour)
	currentYear := now.Year()

	// –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
	layout := "2006-01-02 15:04"
	candidateStr := fmt.Sprintf("%d-%s %s", currentYear, datePart, timePart)
	t, err := time.ParseInLocation(layout, candidateStr, time.Local)
	if err != nil {
		return time.Time{}, err
	}

	// –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ –≤ –±—É–¥—É—â–µ–º ‚Äî –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
	if t.After(now.AddDate(0, 6, 0)) {
		t = t.AddDate(-1, 0, 0)
	}
	// –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥ (—Ä–µ–¥–∫–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
	if t.Before(now.AddDate(0, -6, 0)) {
		t = t.AddDate(1, 0, 0)
	}

	return t, nil
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "H:MM" ‚Äî —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∫–∏–¥–∞
func timeSinceLast(vkids []string) string {
	if len(vkids) == 0 {
		return "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
	}
	last := vkids[len(vkids)-1]
	t, err := parseVkidTime(last)
	if err != nil {
		return "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—ã"
	}
	duration := time.Since(t)
	hours := int(duration.Hours())
	minutes := int(duration.Minutes()) % 60
	return fmt.Sprintf("%d:%02d", hours, minutes)
}

type BOT struct {
	bot *tgbotapi.BotAPI
	mu  *sync.Mutex
}

func (b *BOT) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	b.mu.Lock()

	msg, err := b.bot.Send(c)
	if err != nil {
		return tgbotapi.Message{}, err
	}

	return msg, nil
}

func main() {
	token := "8244558007:AAENGj8YGU0irK5W4O6PnNQXR-88100cNpU"

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	Bot := &BOT{
		bot: bot,
		mu:  &sync.Mutex{},
	}

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	loadOrCreateData()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message != nil {
			chatID := update.Message.Chat.ID
			text := strings.TrimSpace(update.Message.Text)

			if _, exists := users[chatID]; !exists {
				users[chatID] = &UserData{Vkids: []string{}, ReminderHours: 0}
			}
			userData := users[chatID]

			switch text {
			case "/start":
				kb := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("–≤–∫–∏–Ω—É–ª—Å—è"),
						tgbotapi.NewKeyboardButton("—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ"),
					),
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("–ú–µ–Ω—é"),
					),
				)
				msg := tgbotapi.NewMessage(chatID, "–ì–æ—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –≤–∫–∏–¥—ã!")
				msg.ReplyMarkup = kb
				Bot.bot.Send(msg)

			case "–≤–∫–∏–Ω—É–ª—Å—è":
				timeSleep := users[chatID].ReminderHours
				setRemind(Bot, time.Now(), chatID, timeSleep)
				formatted := getFormattedNow() // –Ω–∞–ø—Ä–∏–º–µ—Ä: "04-05 Fri 14:30"
				userData.Vkids = append(userData.Vkids, formatted)
				saveData()
				Bot.bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: "+formatted))

			case "—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ":
				result := timeSinceLast(userData.Vkids)
				Bot.bot.Send(tgbotapi.NewMessage(chatID, "‚è± –ü—Ä–æ—à–ª–æ: "+result))

			case "/file":
				if _, err := os.Stat(dataFile); err == nil {
					Bot.bot.Send(tgbotapi.NewDocument(chatID, tgbotapi.FilePath(dataFile)))
				} else {
					Bot.bot.Send(tgbotapi.NewMessage(chatID, "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç. –°–¥–µ–ª–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω '–≤–∫–∏–¥'."))
				}
			case "–ú–µ–Ω—é":
				inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤–∫–∏–¥–∞", "set_reminder"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∫–∏–¥", "delete_last"),
					),
				)
				msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
				msg.ReplyMarkup = inlineKeyboard
				Bot.bot.Send(msg)

			default:
				// –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞
				if userData.ReminderHours == -1 {
					if hours, err := strconv.Atoi(text); err == nil && hours > 0 {
						userData.ReminderHours = hours
						saveData()
						Bot.bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ %d —á.", hours)))
					} else {
						Bot.bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0."))
					}
				}
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
		if update.CallbackQuery != nil {
			cb := update.CallbackQuery
			chatID := cb.Message.Chat.ID

			if _, exists := users[chatID]; !exists {
				users[chatID] = &UserData{Vkids: []string{}, ReminderHours: 0}
			}
			userData := users[chatID]

			var resp tgbotapi.CallbackConfig
			switch cb.Data {
			case "set_reminder":
				userData.ReminderHours = -1
				saveData()
				resp = tgbotapi.NewCallback(cb.ID, "")
				bot.Request(resp)
				Bot.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Å—ã):"))

			case "delete_last":
				if len(userData.Vkids) == 0 {
					resp = tgbotapi.NewCallback(cb.ID, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
				} else {
					userData.Vkids = userData.Vkids[:len(userData.Vkids)-1]
					saveData()
					resp = tgbotapi.NewCallback(cb.ID, "–£–¥–∞–ª–µ–Ω–æ")
				}
				Bot.bot.Request(resp)

			}
		}
	}
}

func setRemind(Bot *BOT, timeNow time.Time, id int64, timeWait int) {
	go func() {

		time.Sleep(time.Duration(timeWait) * time.Hour)

		msg := tgbotapi.NewMessage(id, fmt.Sprintf("–ü—Ä–æ—à–ª–æ %d —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∫–∏–¥–∞!", timeWait))
		Bot.bot.Send(msg)

	}()
}
